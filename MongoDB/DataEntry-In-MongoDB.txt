
                                               [CRUD] C(Create)-R(Read)-U(Update)-D(Delete) OPERATIONS

// Inserting Data in MongoDB

>> use krishnKart
db.items.insertOne({name: "Samsung 30s", price: 22000, rating: 4.5, qty: 233, sold: 98})

// OUTPUT:

// {
// 	"acknowledged" : true,
// 	"insertedId" : ObjectId("619237ea6aa94901054ea9bc")
// }

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

>> db.items.insertMany([{ name: "Samsung 30s", price: 22000, rating: 4.5, qty: 233, sold: 98 }, { name: "Moto 30s", price: 29000, rating: 4.0, qty: 202, sold: 103 }, { name: "Apple 7s", price: 29500, rating: 4.2, qty: 155, sold: 256 }])

// OUTPUT:
// { "_id" : ObjectId("619237ea6aa94901054ea9bc"), "name" : "Samsung 30s", "price" : 22000, "rating" : 4.5, "qty" : 233, "sold" : 98 }
// { "_id" : ObjectId("61923a1409a63fb7eab92d81"), "name" : "Samsung 30s", "price" : 22000, "rating" : 4.5, "qty" : 233, "sold" : 98 }
// { "_id" : ObjectId("61923a1409a63fb7eab92d82"), "name" : "Moto 30s", "price" : 29000, "rating" : 4, "qty" : 202, "sold" : 103 }
// { "_id" : ObjectId("61923a1409a63fb7eab92d83"), "name" : "Apple 7s", "price" : 29500, "rating" : 4.2, "qty" : 155, "sold" : 256 }

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

<<<< SEARCHING FOR DATA IN THE MongoDB >>>>

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

>> db.items.find({price: 22000})

OUTPUT:
this command will return all the entries whose price is set to 22000

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

>> db.items.find()

OUTPUT:
this command will return allthe entries which has entered into database

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

>> db.items.find({price: {$gte: 29000}})

OUTPUT:
this will return all the entries whose price is greater than or equals to 29000

<< g >> -- Greater
<< t >> -- Than
<< e >> -- Equals to
<< l >> -- Less to

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

>> db.items.find({price: {$gt: 29000}})

OUTPUT:
this will return all the values whose price is greater than 29000

<< g >> -- Greater
<< t >> -- Than
<< e >> -- Equals to
<< l >> -- Less to

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

>> db.items.find({rating: {$gt: 4.0}, price:{$gt: 29000}})

OUTPUT:
this will return all those values whose rating is greater than 4.0 and price is greater than 29000

<< , >> Comma acts as AND opertator

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

>> db.items.find({rating: {$lt: 4.5}, price:{$gt: 29000}})

OUTPUT:
this will return all those values whose rating is less than 4.5 and price is greater than 29000

<< g >> -- Greater
<< t >> -- Than
<< e >> -- Equals to
<< l >> -- Less

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

>> db.items.find({ $or: [{rating: {$lt: 4.0}}, {price:{$gt: 29000}}]})

OUTPUT:
this will return data according to either or case. Data will be shown either it has rating less than 4.0 or price greater than 29000
this is OR case here << $or: >> is the symbol of OR.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

>> db.items.find({rating: {$gt: 4.0}}, {rating: 1})

OUTPUT:
this will return only rating field of the shown data which has rating Greater than 4.0
<< rating: 1 >> shows that this will show only one data field rating

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

> db.items.find({rating: {$gt: 4.0}}, {rating: 1, qty: 1})

OUTPUT:
this will show both fields of the given statement as above

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// DELETION OF DATA FROM MONGODB

>> db.items.deleteOne({price: 22000})

OUTPUT:
this will delete the first entry with price 22000 from the database id there is multiple values related to this query
here price is known as << document >> not << key >> as in programming languages it is known as key in object.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

>> db.items.deleteMany({price: 18000})

OUTPUT:
this will delete all the entries of document price 18000 will be deleted

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// UPDATION OF DATA IN DATABASES

>> db.<Name of Collection ie items Collection above>.insertOne({a:50})

OUTPUT:
this will create the another Collection as above and insert the value a = 50

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

>> db.items.updateOne({name: "Samsung 30s"},{$set: {price: 2000}})

OUTPUT:
this will update the value of the price of which first item named Samsung 30s

<< $set >> is the keyword for updation of the value.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

>> db.items.updateMany({name: "Samsung 30s"}, {$set: {price: 10000}})

OUTPUT:
this query will change the price value to 10000 in all places where the name is Samsung 30s.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

>> db.items.updateMany({name: "Samsung 30s"},{$set: {price: 11000, rating: 1.1}})

OUTPUT:
this query will update the price and rating of the item whose name is found to be Samsung 30s
Actually this is the multiple field updation in the MongoDB.