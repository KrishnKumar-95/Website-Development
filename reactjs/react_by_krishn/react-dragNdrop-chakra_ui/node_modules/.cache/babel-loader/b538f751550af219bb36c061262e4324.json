{"ast":null,"code":"import { invariant } from '@react-dnd/invariant';\nexport function validateSourceContract(source) {\n  invariant(typeof source.canDrag === 'function', 'Expected canDrag to be a function.');\n  invariant(typeof source.beginDrag === 'function', 'Expected beginDrag to be a function.');\n  invariant(typeof source.endDrag === 'function', 'Expected endDrag to be a function.');\n}\nexport function validateTargetContract(target) {\n  invariant(typeof target.canDrop === 'function', 'Expected canDrop to be a function.');\n  invariant(typeof target.hover === 'function', 'Expected hover to be a function.');\n  invariant(typeof target.drop === 'function', 'Expected beginDrag to be a function.');\n}\nexport function validateType(type, allowArray) {\n  if (allowArray && Array.isArray(type)) {\n    type.forEach(t => validateType(t, false));\n    return;\n  }\n\n  invariant(typeof type === 'string' || typeof type === 'symbol', allowArray ? 'Type can only be a string, a symbol, or an array of either.' : 'Type can only be a string or a symbol.');\n}","map":{"version":3,"sources":["/home/ubkrishn/Desktop/Website Development/reactjs/react_by_krishn/react-dragNdrop-chakra_ui/node_modules/dnd-core/src/contracts.ts"],"names":["invariant","validateSourceContract","source","canDrag","beginDrag","endDrag","validateTargetContract","target","canDrop","hover","drop","validateType","type","allowArray","Array","isArray","forEach","t"],"mappings":"AAAA,SAASA,SAAT,QAA0B,sBAA1B;AAGA,OAAM,SAAUC,sBAAV,CAAiCC,MAAjC,EAA2D;AAChEF,EAAAA,SAAS,CACR,OAAOE,MAAM,CAACC,OAAd,KAA0B,UADlB,EAER,oCAFQ,CAATH;AAIAA,EAAAA,SAAS,CACR,OAAOE,MAAM,CAACE,SAAd,KAA4B,UADpB,EAER,sCAFQ,CAATJ;AAIAA,EAAAA,SAAS,CACR,OAAOE,MAAM,CAACG,OAAd,KAA0B,UADlB,EAER,oCAFQ,CAATL;AAIA;AAED,OAAM,SAAUM,sBAAV,CAAiCC,MAAjC,EAA2D;AAChEP,EAAAA,SAAS,CACR,OAAOO,MAAM,CAACC,OAAd,KAA0B,UADlB,EAER,oCAFQ,CAATR;AAIAA,EAAAA,SAAS,CACR,OAAOO,MAAM,CAACE,KAAd,KAAwB,UADhB,EAER,kCAFQ,CAATT;AAIAA,EAAAA,SAAS,CACR,OAAOO,MAAM,CAACG,IAAd,KAAuB,UADf,EAER,sCAFQ,CAATV;AAIA;AAED,OAAM,SAAUW,YAAV,CACLC,IADK,EAELC,UAFK,EAGE;AACP,MAAIA,UAAU,IAAIC,KAAK,CAACC,OAAND,CAAcF,IAAdE,CAAlB,EAAuC;AACtCF,IAAAA,IAAI,CAACI,OAALJ,CAAcK,CAAF,IAAQN,YAAY,CAACM,CAAD,EAAI,KAAJ,CAAhCL;AACA;AACA;;AAEDZ,EAAAA,SAAS,CACR,OAAOY,IAAP,KAAgB,QAAhB,IAA4B,OAAOA,IAAP,KAAgB,QADpC,EAERC,UAAU,GACP,6DADO,GAEP,wCAJK,CAATb;AAMA","sourcesContent":["import { invariant } from '@react-dnd/invariant'\nimport type { DragSource, DropTarget, Identifier } from './interfaces.js'\n\nexport function validateSourceContract(source: DragSource): void {\n\tinvariant(\n\t\ttypeof source.canDrag === 'function',\n\t\t'Expected canDrag to be a function.',\n\t)\n\tinvariant(\n\t\ttypeof source.beginDrag === 'function',\n\t\t'Expected beginDrag to be a function.',\n\t)\n\tinvariant(\n\t\ttypeof source.endDrag === 'function',\n\t\t'Expected endDrag to be a function.',\n\t)\n}\n\nexport function validateTargetContract(target: DropTarget): void {\n\tinvariant(\n\t\ttypeof target.canDrop === 'function',\n\t\t'Expected canDrop to be a function.',\n\t)\n\tinvariant(\n\t\ttypeof target.hover === 'function',\n\t\t'Expected hover to be a function.',\n\t)\n\tinvariant(\n\t\ttypeof target.drop === 'function',\n\t\t'Expected beginDrag to be a function.',\n\t)\n}\n\nexport function validateType(\n\ttype: Identifier | Identifier[],\n\tallowArray?: boolean,\n): void {\n\tif (allowArray && Array.isArray(type)) {\n\t\ttype.forEach((t) => validateType(t, false))\n\t\treturn\n\t}\n\n\tinvariant(\n\t\ttypeof type === 'string' || typeof type === 'symbol',\n\t\tallowArray\n\t\t\t? 'Type can only be a string, a symbol, or an array of either.'\n\t\t\t: 'Type can only be a string or a symbol.',\n\t)\n}\n"]},"metadata":{},"sourceType":"module"}