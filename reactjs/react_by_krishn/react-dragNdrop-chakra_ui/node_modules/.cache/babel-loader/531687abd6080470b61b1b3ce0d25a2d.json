{"ast":null,"code":"import { invariant } from '@react-dnd/invariant';\nlet isCallingCanDrag = false;\nlet isCallingIsDragging = false;\nexport class DragSourceMonitorImpl {\n  receiveHandlerId(sourceId) {\n    this.sourceId = sourceId;\n  }\n\n  getHandlerId() {\n    return this.sourceId;\n  }\n\n  canDrag() {\n    invariant(!isCallingCanDrag, 'You may not call monitor.canDrag() inside your canDrag() implementation. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor');\n\n    try {\n      isCallingCanDrag = true;\n      return this.internalMonitor.canDragSource(this.sourceId);\n    } finally {\n      isCallingCanDrag = false;\n    }\n  }\n\n  isDragging() {\n    if (!this.sourceId) {\n      return false;\n    }\n\n    invariant(!isCallingIsDragging, 'You may not call monitor.isDragging() inside your isDragging() implementation. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor');\n\n    try {\n      isCallingIsDragging = true;\n      return this.internalMonitor.isDraggingSource(this.sourceId);\n    } finally {\n      isCallingIsDragging = false;\n    }\n  }\n\n  subscribeToStateChange(listener, options) {\n    return this.internalMonitor.subscribeToStateChange(listener, options);\n  }\n\n  isDraggingSource(sourceId) {\n    return this.internalMonitor.isDraggingSource(sourceId);\n  }\n\n  isOverTarget(targetId, options) {\n    return this.internalMonitor.isOverTarget(targetId, options);\n  }\n\n  getTargetIds() {\n    return this.internalMonitor.getTargetIds();\n  }\n\n  isSourcePublic() {\n    return this.internalMonitor.isSourcePublic();\n  }\n\n  getSourceId() {\n    return this.internalMonitor.getSourceId();\n  }\n\n  subscribeToOffsetChange(listener) {\n    return this.internalMonitor.subscribeToOffsetChange(listener);\n  }\n\n  canDragSource(sourceId) {\n    return this.internalMonitor.canDragSource(sourceId);\n  }\n\n  canDropOnTarget(targetId) {\n    return this.internalMonitor.canDropOnTarget(targetId);\n  }\n\n  getItemType() {\n    return this.internalMonitor.getItemType();\n  }\n\n  getItem() {\n    return this.internalMonitor.getItem();\n  }\n\n  getDropResult() {\n    return this.internalMonitor.getDropResult();\n  }\n\n  didDrop() {\n    return this.internalMonitor.didDrop();\n  }\n\n  getInitialClientOffset() {\n    return this.internalMonitor.getInitialClientOffset();\n  }\n\n  getInitialSourceClientOffset() {\n    return this.internalMonitor.getInitialSourceClientOffset();\n  }\n\n  getSourceClientOffset() {\n    return this.internalMonitor.getSourceClientOffset();\n  }\n\n  getClientOffset() {\n    return this.internalMonitor.getClientOffset();\n  }\n\n  getDifferenceFromInitialOffset() {\n    return this.internalMonitor.getDifferenceFromInitialOffset();\n  }\n\n  constructor(manager) {\n    this.sourceId = null;\n    this.internalMonitor = manager.getMonitor();\n  }\n\n}","map":{"version":3,"sources":["/home/ubkrishn/Desktop/Website Development/reactjs/react_by_krishn/react-dragNdrop-chakra_ui/node_modules/react-dnd/src/internals/DragSourceMonitorImpl.ts"],"names":["invariant","isCallingCanDrag","isCallingIsDragging","DragSourceMonitorImpl","sourceId","manager","internalMonitor","getMonitor","receiveHandlerId","getHandlerId","canDrag","canDragSource","isDragging","isDraggingSource","subscribeToStateChange","listener","options","isOverTarget","targetId","getTargetIds","isSourcePublic","getSourceId","subscribeToOffsetChange","canDropOnTarget","getItemType","getItem","getDropResult","didDrop","getInitialClientOffset","getInitialSourceClientOffset","getSourceClientOffset","getClientOffset","getDifferenceFromInitialOffset"],"mappings":"AAQA,SAASA,SAAT,QAA0B,sBAA1B;AAGA,IAAIC,gBAAgB,GAAG,KAAvB;AACA,IAAIC,mBAAmB,GAAG,KAA1B;AAEA,OAAM,MAAOC,qBAAP,CAA4B;AAQ1BK,EAAAA,gBAAgB,CAACJ,QAAD,EAAoC;AAC1D,SAAKA,QAAL,GAAgBA,QAAhB;AACA;;AAEMK,EAAAA,YAAY,GAAsB;AACxC,WAAO,KAAKL,QAAZ;AACA;;AAEMM,EAAAA,OAAO,GAAY;AACzBV,IAAAA,SAAS,CAAA,CACPC,gBADO,EAER,8EACC,8EAHO,CAATD;;AAMA,QAAI;AACHC,MAAAA,gBAAgB,GAAG,IAAnBA;AACA,aAAO,KAAKK,eAAL,CAAqBK,aAArB,CAAmC,KAAKP,QAAxC,CAAP;AACA,KAHD,SAGU;AACTH,MAAAA,gBAAgB,GAAG,KAAnBA;AACA;AACD;;AAEMW,EAAAA,UAAU,GAAY;AAC5B,QAAE,CAAG,KAAKR,QAAV,EAAoB;AACnB,aAAO,KAAP;AACA;;AACDJ,IAAAA,SAAS,CAAA,CACPE,mBADO,EAER,oFACC,8EAHO,CAATF;;AAMA,QAAI;AACHE,MAAAA,mBAAmB,GAAG,IAAtBA;AACA,aAAO,KAAKI,eAAL,CAAqBO,gBAArB,CAAsC,KAAKT,QAA3C,CAAP;AACA,KAHD,SAGU;AACTF,MAAAA,mBAAmB,GAAG,KAAtBA;AACA;AACD;;AAEMY,EAAAA,sBAAsB,CAC5BC,QAD4B,EAE5BC,OAF4B,EAGd;AACd,WAAO,KAAKV,eAAL,CAAqBQ,sBAArB,CAA4CC,QAA5C,EAAsDC,OAAtD,CAAP;AACA;;AAEMH,EAAAA,gBAAgB,CAACT,QAAD,EAAgC;AACtD,WAAO,KAAKE,eAAL,CAAqBO,gBAArB,CAAsCT,QAAtC,CAAP;AACA;;AAEMa,EAAAA,YAAY,CAClBC,QADkB,EAElBF,OAFkB,EAGR;AACV,WAAO,KAAKV,eAAL,CAAqBW,YAArB,CAAkCC,QAAlC,EAA4CF,OAA5C,CAAP;AACA;;AAEMG,EAAAA,YAAY,GAAiB;AACnC,WAAO,KAAKb,eAAL,CAAqBa,YAArB,EAAP;AACA;;AAEMC,EAAAA,cAAc,GAAmB;AACvC,WAAO,KAAKd,eAAL,CAAqBc,cAArB,EAAP;AACA;;AAEMC,EAAAA,WAAW,GAAsB;AACvC,WAAO,KAAKf,eAAL,CAAqBe,WAArB,EAAP;AACA;;AAEMC,EAAAA,uBAAuB,CAACP,QAAD,EAAkC;AAC/D,WAAO,KAAKT,eAAL,CAAqBgB,uBAArB,CAA6CP,QAA7C,CAAP;AACA;;AAEMJ,EAAAA,aAAa,CAACP,QAAD,EAAgC;AACnD,WAAO,KAAKE,eAAL,CAAqBK,aAArB,CAAmCP,QAAnC,CAAP;AACA;;AAEMmB,EAAAA,eAAe,CAACL,QAAD,EAAgC;AACrD,WAAO,KAAKZ,eAAL,CAAqBiB,eAArB,CAAqCL,QAArC,CAAP;AACA;;AAEMM,EAAAA,WAAW,GAAsB;AACvC,WAAO,KAAKlB,eAAL,CAAqBkB,WAArB,EAAP;AACA;;AAEMC,EAAAA,OAAO,GAAQ;AACrB,WAAO,KAAKnB,eAAL,CAAqBmB,OAArB,EAAP;AACA;;AAEMC,EAAAA,aAAa,GAAQ;AAC3B,WAAO,KAAKpB,eAAL,CAAqBoB,aAArB,EAAP;AACA;;AAEMC,EAAAA,OAAO,GAAY;AACzB,WAAO,KAAKrB,eAAL,CAAqBqB,OAArB,EAAP;AACA;;AAEMC,EAAAA,sBAAsB,GAAmB;AAC/C,WAAO,KAAKtB,eAAL,CAAqBsB,sBAArB,EAAP;AACA;;AAEMC,EAAAA,4BAA4B,GAAmB;AACrD,WAAO,KAAKvB,eAAL,CAAqBuB,4BAArB,EAAP;AACA;;AAEMC,EAAAA,qBAAqB,GAAmB;AAC9C,WAAO,KAAKxB,eAAL,CAAqBwB,qBAArB,EAAP;AACA;;AAEMC,EAAAA,eAAe,GAAmB;AACxC,WAAO,KAAKzB,eAAL,CAAqByB,eAArB,EAAP;AACA;;AAEMC,EAAAA,8BAA8B,GAAmB;AACvD,WAAO,KAAK1B,eAAL,CAAqB0B,8BAArB,EAAP;AACA;;cAzHkB3B,O,EAA0B;AAJvC,SAEED,QAFF,GAEgC,IAFhC;AAKL,SAAKE,eAAL,GAAuBD,OAAO,CAACE,UAARF,EAAvB;AACA;;AANgC","sourcesContent":["import type {\n\tDragDropManager,\n\tDragDropMonitor,\n\tUnsubscribe,\n\tListener,\n\tIdentifier,\n\tXYCoord,\n} from 'dnd-core'\nimport { invariant } from '@react-dnd/invariant'\nimport type { DragSourceMonitor } from '../types/index.js'\n\nlet isCallingCanDrag = false\nlet isCallingIsDragging = false\n\nexport class DragSourceMonitorImpl implements DragSourceMonitor {\n\tprivate internalMonitor: DragDropMonitor\n\tprivate sourceId: Identifier | null = null\n\n\tpublic constructor(manager: DragDropManager) {\n\t\tthis.internalMonitor = manager.getMonitor()\n\t}\n\n\tpublic receiveHandlerId(sourceId: Identifier | null): void {\n\t\tthis.sourceId = sourceId\n\t}\n\n\tpublic getHandlerId(): Identifier | null {\n\t\treturn this.sourceId\n\t}\n\n\tpublic canDrag(): boolean {\n\t\tinvariant(\n\t\t\t!isCallingCanDrag,\n\t\t\t'You may not call monitor.canDrag() inside your canDrag() implementation. ' +\n\t\t\t\t'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor',\n\t\t)\n\n\t\ttry {\n\t\t\tisCallingCanDrag = true\n\t\t\treturn this.internalMonitor.canDragSource(this.sourceId as Identifier)\n\t\t} finally {\n\t\t\tisCallingCanDrag = false\n\t\t}\n\t}\n\n\tpublic isDragging(): boolean {\n\t\tif (!this.sourceId) {\n\t\t\treturn false\n\t\t}\n\t\tinvariant(\n\t\t\t!isCallingIsDragging,\n\t\t\t'You may not call monitor.isDragging() inside your isDragging() implementation. ' +\n\t\t\t\t'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor',\n\t\t)\n\n\t\ttry {\n\t\t\tisCallingIsDragging = true\n\t\t\treturn this.internalMonitor.isDraggingSource(this.sourceId)\n\t\t} finally {\n\t\t\tisCallingIsDragging = false\n\t\t}\n\t}\n\n\tpublic subscribeToStateChange(\n\t\tlistener: Listener,\n\t\toptions?: { handlerIds?: Identifier[] },\n\t): Unsubscribe {\n\t\treturn this.internalMonitor.subscribeToStateChange(listener, options)\n\t}\n\n\tpublic isDraggingSource(sourceId: Identifier): boolean {\n\t\treturn this.internalMonitor.isDraggingSource(sourceId)\n\t}\n\n\tpublic isOverTarget(\n\t\ttargetId: Identifier,\n\t\toptions?: { shallow: boolean },\n\t): boolean {\n\t\treturn this.internalMonitor.isOverTarget(targetId, options)\n\t}\n\n\tpublic getTargetIds(): Identifier[] {\n\t\treturn this.internalMonitor.getTargetIds()\n\t}\n\n\tpublic isSourcePublic(): boolean | null {\n\t\treturn this.internalMonitor.isSourcePublic()\n\t}\n\n\tpublic getSourceId(): Identifier | null {\n\t\treturn this.internalMonitor.getSourceId()\n\t}\n\n\tpublic subscribeToOffsetChange(listener: Listener): Unsubscribe {\n\t\treturn this.internalMonitor.subscribeToOffsetChange(listener)\n\t}\n\n\tpublic canDragSource(sourceId: Identifier): boolean {\n\t\treturn this.internalMonitor.canDragSource(sourceId)\n\t}\n\n\tpublic canDropOnTarget(targetId: Identifier): boolean {\n\t\treturn this.internalMonitor.canDropOnTarget(targetId)\n\t}\n\n\tpublic getItemType(): Identifier | null {\n\t\treturn this.internalMonitor.getItemType()\n\t}\n\n\tpublic getItem(): any {\n\t\treturn this.internalMonitor.getItem()\n\t}\n\n\tpublic getDropResult(): any {\n\t\treturn this.internalMonitor.getDropResult()\n\t}\n\n\tpublic didDrop(): boolean {\n\t\treturn this.internalMonitor.didDrop()\n\t}\n\n\tpublic getInitialClientOffset(): XYCoord | null {\n\t\treturn this.internalMonitor.getInitialClientOffset()\n\t}\n\n\tpublic getInitialSourceClientOffset(): XYCoord | null {\n\t\treturn this.internalMonitor.getInitialSourceClientOffset()\n\t}\n\n\tpublic getSourceClientOffset(): XYCoord | null {\n\t\treturn this.internalMonitor.getSourceClientOffset()\n\t}\n\n\tpublic getClientOffset(): XYCoord | null {\n\t\treturn this.internalMonitor.getClientOffset()\n\t}\n\n\tpublic getDifferenceFromInitialOffset(): XYCoord | null {\n\t\treturn this.internalMonitor.getDifferenceFromInitialOffset()\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}