{"ast":null,"code":"export class NativeDragSource {\n  initializeExposedProperties() {\n    Object.keys(this.config.exposeProperties).forEach(property => {\n      Object.defineProperty(this.item, property, {\n        configurable: true,\n        enumerable: true,\n\n        get() {\n          // eslint-disable-next-line no-console\n          console.warn(`Browser doesn't allow reading \"${property}\" until the drop event.`);\n          return null;\n        }\n\n      });\n    });\n  }\n\n  loadDataTransfer(dataTransfer) {\n    if (dataTransfer) {\n      const newProperties = {};\n      Object.keys(this.config.exposeProperties).forEach(property => {\n        const propertyFn = this.config.exposeProperties[property];\n\n        if (propertyFn != null) {\n          newProperties[property] = {\n            value: propertyFn(dataTransfer, this.config.matchesTypes),\n            configurable: true,\n            enumerable: true\n          };\n        }\n      });\n      Object.defineProperties(this.item, newProperties);\n    }\n  }\n\n  canDrag() {\n    return true;\n  }\n\n  beginDrag() {\n    return this.item;\n  }\n\n  isDragging(monitor, handle) {\n    return handle === monitor.getSourceId();\n  }\n\n  endDrag() {// empty\n  }\n\n  constructor(config) {\n    this.config = config;\n    this.item = {};\n    this.initializeExposedProperties();\n  }\n\n}","map":{"version":3,"sources":["/home/ubkrishn/Desktop/Website Development/reactjs/react_by_krishn/react-dragNdrop-chakra_ui/node_modules/react-dnd-html5-backend/src/NativeDragSources/NativeDragSource.ts"],"names":["NativeDragSource","config","item","initializeExposedProperties","Object","keys","exposeProperties","forEach","property","defineProperty","configurable","enumerable","get","console","warn","loadDataTransfer","dataTransfer","newProperties","propertyFn","value","matchesTypes","defineProperties","canDrag","beginDrag","isDragging","monitor","handle","getSourceId","endDrag"],"mappings":"AAGA,OAAM,MAAOA,gBAAP,CAAuB;AAUpBG,EAAAA,2BAA2B,GAAG;AACrCC,IAAAA,MAAM,CAACC,IAAPD,CAAY,KAAKH,MAAL,CAAYK,gBAAxBF,EAA0CG,OAA1CH,CAAmDI,QAAF,IAAe;AAC/DJ,MAAAA,MAAM,CAACK,cAAPL,CAAsB,KAAKF,IAA3BE,EAAiCI,QAAjCJ,EAA2C;AAC1CM,QAAAA,YAAY,EAAE,IAD4B;AAE1CC,QAAAA,UAAU,EAAE,IAF8B;;AAG1CC,QAAAA,GAAG,GAAG;AACL;AACAC,UAAAA,OAAO,CAACC,IAARD,CACE,kCAAiCL,QAAS,yBAD5CK;AAGA,iBAAO,IAAP;AACA;;AATyC,OAA3CT;AAWA,KAZDA;AAaA;;AAEMW,EAAAA,gBAAgB,CAACC,YAAD,EAAsD;AAC5E,QAAIA,YAAJ,EAAkB;AACjB,YAAMC,aAAa,GAA0B,EAA7C;AACAb,MAAAA,MAAM,CAACC,IAAPD,CAAY,KAAKH,MAAL,CAAYK,gBAAxBF,EAA0CG,OAA1CH,CAAmDI,QAAF,IAAe;AAC/D,cAAMU,UAAU,GAAG,KAAKjB,MAAL,CAAYK,gBAAZ,CAA6BE,QAA7B,CAAnB;;AACA,YAAIU,UAAU,IAAI,IAAlB,EAAwB;AACvBD,UAAAA,aAAa,CAACT,QAAD,CAAbS,GAA0B;AACzBE,YAAAA,KAAK,EAAED,UAAU,CAACF,YAAD,EAAe,KAAKf,MAAL,CAAYmB,YAA3B,CADQ;AAEzBV,YAAAA,YAAY,EAAE,IAFW;AAGzBC,YAAAA,UAAU,EAAE;AAHa,WAA1BM;AAKA;AACD,OATDb;AAUAA,MAAAA,MAAM,CAACiB,gBAAPjB,CAAwB,KAAKF,IAA7BE,EAAmCa,aAAnCb;AACA;AACD;;AAEMkB,EAAAA,OAAO,GAAY;AACzB,WAAO,IAAP;AACA;;AAEMC,EAAAA,SAAS,GAAQ;AACvB,WAAO,KAAKrB,IAAZ;AACA;;AAEMsB,EAAAA,UAAU,CAACC,OAAD,EAA2BC,MAA3B,EAAoD;AACpE,WAAOA,MAAM,KAAKD,OAAO,CAACE,WAARF,EAAlB;AACA;;AAEMG,EAAAA,OAAO,GAAS,CACtB;AACA;;cArDkB3B,M,EAA0B;AAC5C,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKC,2BAAL;AACA;;AAR2B","sourcesContent":["import type { NativeItemConfig } from './nativeTypesConfig.js'\nimport type { DragDropMonitor } from 'dnd-core'\n\nexport class NativeDragSource {\n\tpublic item: any\n\tprivate config: NativeItemConfig\n\n\tpublic constructor(config: NativeItemConfig) {\n\t\tthis.config = config\n\t\tthis.item = {}\n\t\tthis.initializeExposedProperties()\n\t}\n\n\tprivate initializeExposedProperties() {\n\t\tObject.keys(this.config.exposeProperties).forEach((property) => {\n\t\t\tObject.defineProperty(this.item, property, {\n\t\t\t\tconfigurable: true, // This is needed to allow redefining it later\n\t\t\t\tenumerable: true,\n\t\t\t\tget() {\n\t\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t`Browser doesn't allow reading \"${property}\" until the drop event.`,\n\t\t\t\t\t)\n\t\t\t\t\treturn null\n\t\t\t\t},\n\t\t\t})\n\t\t})\n\t}\n\n\tpublic loadDataTransfer(dataTransfer: DataTransfer | null | undefined): void {\n\t\tif (dataTransfer) {\n\t\t\tconst newProperties: PropertyDescriptorMap = {}\n\t\t\tObject.keys(this.config.exposeProperties).forEach((property) => {\n\t\t\t\tconst propertyFn = this.config.exposeProperties[property]\n\t\t\t\tif (propertyFn != null) {\n\t\t\t\t\tnewProperties[property] = {\n\t\t\t\t\t\tvalue: propertyFn(dataTransfer, this.config.matchesTypes),\n\t\t\t\t\t\tconfigurable: true,\n\t\t\t\t\t\tenumerable: true,\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\tObject.defineProperties(this.item, newProperties)\n\t\t}\n\t}\n\n\tpublic canDrag(): boolean {\n\t\treturn true\n\t}\n\n\tpublic beginDrag(): any {\n\t\treturn this.item\n\t}\n\n\tpublic isDragging(monitor: DragDropMonitor, handle: string): boolean {\n\t\treturn handle === monitor.getSourceId()\n\t}\n\n\tpublic endDrag(): void {\n\t\t// empty\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}