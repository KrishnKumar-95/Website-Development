{"ast":null,"code":"import { shallowEqual } from '@react-dnd/shallowequal';\nimport { wrapConnectorHooks } from './wrapConnectorHooks.mjs';\nimport { isRef } from './isRef.mjs';\nexport class TargetConnector {\n  get connectTarget() {\n    return this.dropTarget;\n  }\n\n  reconnect() {\n    // if nothing has changed then don't resubscribe\n    const didChange = this.didHandlerIdChange() || this.didDropTargetChange() || this.didOptionsChange();\n\n    if (didChange) {\n      this.disconnectDropTarget();\n    }\n\n    const dropTarget = this.dropTarget;\n\n    if (!this.handlerId) {\n      return;\n    }\n\n    if (!dropTarget) {\n      this.lastConnectedDropTarget = dropTarget;\n      return;\n    }\n\n    if (didChange) {\n      this.lastConnectedHandlerId = this.handlerId;\n      this.lastConnectedDropTarget = dropTarget;\n      this.lastConnectedDropTargetOptions = this.dropTargetOptions;\n      this.unsubscribeDropTarget = this.backend.connectDropTarget(this.handlerId, dropTarget, this.dropTargetOptions);\n    }\n  }\n\n  receiveHandlerId(newHandlerId) {\n    if (newHandlerId === this.handlerId) {\n      return;\n    }\n\n    this.handlerId = newHandlerId;\n    this.reconnect();\n  }\n\n  get dropTargetOptions() {\n    return this.dropTargetOptionsInternal;\n  }\n\n  set dropTargetOptions(options) {\n    this.dropTargetOptionsInternal = options;\n  }\n\n  didHandlerIdChange() {\n    return this.lastConnectedHandlerId !== this.handlerId;\n  }\n\n  didDropTargetChange() {\n    return this.lastConnectedDropTarget !== this.dropTarget;\n  }\n\n  didOptionsChange() {\n    return !shallowEqual(this.lastConnectedDropTargetOptions, this.dropTargetOptions);\n  }\n\n  disconnectDropTarget() {\n    if (this.unsubscribeDropTarget) {\n      this.unsubscribeDropTarget();\n      this.unsubscribeDropTarget = undefined;\n    }\n  }\n\n  get dropTarget() {\n    return this.dropTargetNode || this.dropTargetRef && this.dropTargetRef.current;\n  }\n\n  clearDropTarget() {\n    this.dropTargetRef = null;\n    this.dropTargetNode = null;\n  }\n\n  constructor(backend) {\n    this.hooks = wrapConnectorHooks({\n      dropTarget: (node, options) => {\n        this.clearDropTarget();\n        this.dropTargetOptions = options;\n\n        if (isRef(node)) {\n          this.dropTargetRef = node;\n        } else {\n          this.dropTargetNode = node;\n        }\n\n        this.reconnect();\n      }\n    });\n    this.handlerId = null; // The drop target may either be attached via ref or connect function\n\n    this.dropTargetRef = null;\n    this.dropTargetOptionsInternal = null;\n    this.lastConnectedHandlerId = null;\n    this.lastConnectedDropTarget = null;\n    this.lastConnectedDropTargetOptions = null;\n    this.backend = backend;\n  }\n\n}","map":{"version":3,"sources":["/home/ubkrishn/Desktop/Website Development/reactjs/react_by_krishn/react-dragNdrop-chakra_ui/node_modules/react-dnd/src/internals/TargetConnector.ts"],"names":["shallowEqual","wrapConnectorHooks","isRef","TargetConnector","hooks","dropTarget","node","options","clearDropTarget","dropTargetOptions","dropTargetRef","dropTargetNode","reconnect","handlerId","dropTargetOptionsInternal","lastConnectedHandlerId","lastConnectedDropTarget","lastConnectedDropTargetOptions","backend","connectTarget","didChange","didHandlerIdChange","didDropTargetChange","didOptionsChange","disconnectDropTarget","unsubscribeDropTarget","connectDropTarget","receiveHandlerId","newHandlerId","undefined","current"],"mappings":"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","sourcesContent":["import type { RefObject } from 'react'\nimport { shallowEqual } from '@react-dnd/shallowequal'\nimport { wrapConnectorHooks } from './wrapConnectorHooks.js'\nimport type { Backend, Unsubscribe, Identifier } from 'dnd-core'\nimport { isRef } from './isRef.js'\nimport type { Connector } from './SourceConnector.js'\nimport type { DropTargetOptions } from '../types/index.js'\n\nexport class TargetConnector implements Connector {\n\tpublic hooks = wrapConnectorHooks({\n\t\tdropTarget: (node: any, options: DropTargetOptions) => {\n\t\t\tthis.clearDropTarget()\n\t\t\tthis.dropTargetOptions = options\n\t\t\tif (isRef(node)) {\n\t\t\t\tthis.dropTargetRef = node\n\t\t\t} else {\n\t\t\t\tthis.dropTargetNode = node\n\t\t\t}\n\t\t\tthis.reconnect()\n\t\t},\n\t})\n\n\tprivate handlerId: Identifier | null = null\n\t// The drop target may either be attached via ref or connect function\n\tprivate dropTargetRef: RefObject<any> | null = null\n\tprivate dropTargetNode: any\n\tprivate dropTargetOptionsInternal: DropTargetOptions | null = null\n\tprivate unsubscribeDropTarget: Unsubscribe | undefined\n\n\tprivate lastConnectedHandlerId: Identifier | null = null\n\tprivate lastConnectedDropTarget: any = null\n\tprivate lastConnectedDropTargetOptions: DropTargetOptions | null = null\n\tprivate readonly backend: Backend\n\n\tpublic constructor(backend: Backend) {\n\t\tthis.backend = backend\n\t}\n\n\tpublic get connectTarget(): any {\n\t\treturn this.dropTarget\n\t}\n\n\tpublic reconnect(): void {\n\t\t// if nothing has changed then don't resubscribe\n\t\tconst didChange =\n\t\t\tthis.didHandlerIdChange() ||\n\t\t\tthis.didDropTargetChange() ||\n\t\t\tthis.didOptionsChange()\n\n\t\tif (didChange) {\n\t\t\tthis.disconnectDropTarget()\n\t\t}\n\n\t\tconst dropTarget = this.dropTarget\n\t\tif (!this.handlerId) {\n\t\t\treturn\n\t\t}\n\t\tif (!dropTarget) {\n\t\t\tthis.lastConnectedDropTarget = dropTarget\n\t\t\treturn\n\t\t}\n\n\t\tif (didChange) {\n\t\t\tthis.lastConnectedHandlerId = this.handlerId\n\t\t\tthis.lastConnectedDropTarget = dropTarget\n\t\t\tthis.lastConnectedDropTargetOptions = this.dropTargetOptions\n\n\t\t\tthis.unsubscribeDropTarget = this.backend.connectDropTarget(\n\t\t\t\tthis.handlerId,\n\t\t\t\tdropTarget,\n\t\t\t\tthis.dropTargetOptions,\n\t\t\t)\n\t\t}\n\t}\n\n\tpublic receiveHandlerId(newHandlerId: Identifier | null): void {\n\t\tif (newHandlerId === this.handlerId) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.handlerId = newHandlerId\n\t\tthis.reconnect()\n\t}\n\n\tpublic get dropTargetOptions(): DropTargetOptions {\n\t\treturn this.dropTargetOptionsInternal\n\t}\n\tpublic set dropTargetOptions(options: DropTargetOptions) {\n\t\tthis.dropTargetOptionsInternal = options\n\t}\n\n\tprivate didHandlerIdChange(): boolean {\n\t\treturn this.lastConnectedHandlerId !== this.handlerId\n\t}\n\n\tprivate didDropTargetChange(): boolean {\n\t\treturn this.lastConnectedDropTarget !== this.dropTarget\n\t}\n\n\tprivate didOptionsChange(): boolean {\n\t\treturn !shallowEqual(\n\t\t\tthis.lastConnectedDropTargetOptions,\n\t\t\tthis.dropTargetOptions,\n\t\t)\n\t}\n\n\tpublic disconnectDropTarget() {\n\t\tif (this.unsubscribeDropTarget) {\n\t\t\tthis.unsubscribeDropTarget()\n\t\t\tthis.unsubscribeDropTarget = undefined\n\t\t}\n\t}\n\n\tprivate get dropTarget() {\n\t\treturn (\n\t\t\tthis.dropTargetNode || (this.dropTargetRef && this.dropTargetRef.current)\n\t\t)\n\t}\n\n\tprivate clearDropTarget() {\n\t\tthis.dropTargetRef = null\n\t\tthis.dropTargetNode = null\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}