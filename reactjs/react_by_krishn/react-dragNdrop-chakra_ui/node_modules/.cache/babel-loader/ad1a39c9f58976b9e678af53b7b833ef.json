{"ast":null,"code":"// cheap lodash replacements\nexport function memoize(fn) {\n  let result = null;\n\n  const memoized = () => {\n    if (result == null) {\n      result = fn();\n    }\n\n    return result;\n  };\n\n  return memoized;\n}\n/**\n * drop-in replacement for _.without\n */\n\nexport function without(items, item) {\n  return items.filter(i => i !== item);\n}\nexport function union(itemsA, itemsB) {\n  const set = new Set();\n\n  const insertItem = item => set.add(item);\n\n  itemsA.forEach(insertItem);\n  itemsB.forEach(insertItem);\n  const result = [];\n  set.forEach(key => result.push(key));\n  return result;\n}","map":{"version":3,"sources":["/home/ubkrishn/Desktop/Website Development/reactjs/react_by_krishn/react-dragNdrop-chakra_ui/node_modules/react-dnd-html5-backend/src/utils/js_utils.ts"],"names":["memoize","fn","result","memoized","without","items","item","filter","i","union","itemsA","itemsB","set","Set","insertItem","add","forEach","key","push"],"mappings":"AAAA;AAEA,OAAM,SAAUA,OAAV,CAAqBC,EAArB,EAA2C;AAChD,MAAIC,MAAM,GAAa,IAAvB;;AACA,QAAMC,QAAQ,GAAA,MAAS;AACtB,QAAID,MAAM,IAAI,IAAd,EAAoB;AACnBA,MAAAA,MAAM,GAAGD,EAAE,EAAXC;AACA;;AACD,WAAOA,MAAP;AACA,GALD;;AAMA,SAAOC,QAAP;AACA;AAED;;AAAA;;AAGA,OAAM,SAAUC,OAAV,CAAqBC,KAArB,EAAiCC,IAAjC,EAA0C;AAC/C,SAAOD,KAAK,CAACE,MAANF,CAAcG,CAAF,IAAQA,CAAC,KAAKF,IAA1BD,CAAP;AACA;AAED,OAAM,SAAUI,KAAV,CAA2CC,MAA3C,EAAwDC,MAAxD,EAAqE;AAC1E,QAAMC,GAAG,GAAG,IAAIC,GAAJ,EAAZ;;AACA,QAAMC,UAAU,GAAIR,IAAJ,IAAgBM,GAAG,CAACG,GAAJH,CAAQN,IAARM,CAAhC;;AACAF,EAAAA,MAAM,CAACM,OAAPN,CAAeI,UAAfJ;AACAC,EAAAA,MAAM,CAACK,OAAPL,CAAeG,UAAfH;AAEA,QAAMT,MAAM,GAAQ,EAApB;AACAU,EAAAA,GAAG,CAACI,OAAJJ,CAAaK,GAAF,IAAUf,MAAM,CAACgB,IAAPhB,CAAYe,GAAZf,CAArBU;AACA,SAAOV,MAAP;AACA","sourcesContent":["// cheap lodash replacements\n\nexport function memoize<T>(fn: () => T): () => T {\n\tlet result: T | null = null\n\tconst memoized = () => {\n\t\tif (result == null) {\n\t\t\tresult = fn()\n\t\t}\n\t\treturn result\n\t}\n\treturn memoized\n}\n\n/**\n * drop-in replacement for _.without\n */\nexport function without<T>(items: T[], item: T) {\n\treturn items.filter((i) => i !== item)\n}\n\nexport function union<T extends string | number>(itemsA: T[], itemsB: T[]) {\n\tconst set = new Set<T>()\n\tconst insertItem = (item: T) => set.add(item)\n\titemsA.forEach(insertItem)\n\titemsB.forEach(insertItem)\n\n\tconst result: T[] = []\n\tset.forEach((key) => result.push(key))\n\treturn result\n}\n"]},"metadata":{},"sourceType":"module"}