{"ast":null,"code":"import { wrapConnectorHooks } from './wrapConnectorHooks.mjs';\nimport { isRef } from './isRef.mjs';\nimport { shallowEqual } from '@react-dnd/shallowequal';\nexport class SourceConnector {\n  receiveHandlerId(newHandlerId) {\n    if (this.handlerId === newHandlerId) {\n      return;\n    }\n\n    this.handlerId = newHandlerId;\n    this.reconnect();\n  }\n\n  get connectTarget() {\n    return this.dragSource;\n  }\n\n  get dragSourceOptions() {\n    return this.dragSourceOptionsInternal;\n  }\n\n  set dragSourceOptions(options) {\n    this.dragSourceOptionsInternal = options;\n  }\n\n  get dragPreviewOptions() {\n    return this.dragPreviewOptionsInternal;\n  }\n\n  set dragPreviewOptions(options) {\n    this.dragPreviewOptionsInternal = options;\n  }\n\n  reconnect() {\n    const didChange = this.reconnectDragSource();\n    this.reconnectDragPreview(didChange);\n  }\n\n  reconnectDragSource() {\n    const dragSource = this.dragSource; // if nothing has changed then don't resubscribe\n\n    const didChange = this.didHandlerIdChange() || this.didConnectedDragSourceChange() || this.didDragSourceOptionsChange();\n\n    if (didChange) {\n      this.disconnectDragSource();\n    }\n\n    if (!this.handlerId) {\n      return didChange;\n    }\n\n    if (!dragSource) {\n      this.lastConnectedDragSource = dragSource;\n      return didChange;\n    }\n\n    if (didChange) {\n      this.lastConnectedHandlerId = this.handlerId;\n      this.lastConnectedDragSource = dragSource;\n      this.lastConnectedDragSourceOptions = this.dragSourceOptions;\n      this.dragSourceUnsubscribe = this.backend.connectDragSource(this.handlerId, dragSource, this.dragSourceOptions);\n    }\n\n    return didChange;\n  }\n\n  reconnectDragPreview() {\n    let forceDidChange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const dragPreview = this.dragPreview; // if nothing has changed then don't resubscribe\n\n    const didChange = forceDidChange || this.didHandlerIdChange() || this.didConnectedDragPreviewChange() || this.didDragPreviewOptionsChange();\n\n    if (didChange) {\n      this.disconnectDragPreview();\n    }\n\n    if (!this.handlerId) {\n      return;\n    }\n\n    if (!dragPreview) {\n      this.lastConnectedDragPreview = dragPreview;\n      return;\n    }\n\n    if (didChange) {\n      this.lastConnectedHandlerId = this.handlerId;\n      this.lastConnectedDragPreview = dragPreview;\n      this.lastConnectedDragPreviewOptions = this.dragPreviewOptions;\n      this.dragPreviewUnsubscribe = this.backend.connectDragPreview(this.handlerId, dragPreview, this.dragPreviewOptions);\n    }\n  }\n\n  didHandlerIdChange() {\n    return this.lastConnectedHandlerId !== this.handlerId;\n  }\n\n  didConnectedDragSourceChange() {\n    return this.lastConnectedDragSource !== this.dragSource;\n  }\n\n  didConnectedDragPreviewChange() {\n    return this.lastConnectedDragPreview !== this.dragPreview;\n  }\n\n  didDragSourceOptionsChange() {\n    return !shallowEqual(this.lastConnectedDragSourceOptions, this.dragSourceOptions);\n  }\n\n  didDragPreviewOptionsChange() {\n    return !shallowEqual(this.lastConnectedDragPreviewOptions, this.dragPreviewOptions);\n  }\n\n  disconnectDragSource() {\n    if (this.dragSourceUnsubscribe) {\n      this.dragSourceUnsubscribe();\n      this.dragSourceUnsubscribe = undefined;\n    }\n  }\n\n  disconnectDragPreview() {\n    if (this.dragPreviewUnsubscribe) {\n      this.dragPreviewUnsubscribe();\n      this.dragPreviewUnsubscribe = undefined;\n      this.dragPreviewNode = null;\n      this.dragPreviewRef = null;\n    }\n  }\n\n  get dragSource() {\n    return this.dragSourceNode || this.dragSourceRef && this.dragSourceRef.current;\n  }\n\n  get dragPreview() {\n    return this.dragPreviewNode || this.dragPreviewRef && this.dragPreviewRef.current;\n  }\n\n  clearDragSource() {\n    this.dragSourceNode = null;\n    this.dragSourceRef = null;\n  }\n\n  clearDragPreview() {\n    this.dragPreviewNode = null;\n    this.dragPreviewRef = null;\n  }\n\n  constructor(backend) {\n    this.hooks = wrapConnectorHooks({\n      dragSource: (node, options) => {\n        this.clearDragSource();\n        this.dragSourceOptions = options || null;\n\n        if (isRef(node)) {\n          this.dragSourceRef = node;\n        } else {\n          this.dragSourceNode = node;\n        }\n\n        this.reconnectDragSource();\n      },\n      dragPreview: (node, options) => {\n        this.clearDragPreview();\n        this.dragPreviewOptions = options || null;\n\n        if (isRef(node)) {\n          this.dragPreviewRef = node;\n        } else {\n          this.dragPreviewNode = node;\n        }\n\n        this.reconnectDragPreview();\n      }\n    });\n    this.handlerId = null; // The drop target may either be attached via ref or connect function\n\n    this.dragSourceRef = null;\n    this.dragSourceOptionsInternal = null; // The drag preview may either be attached via ref or connect function\n\n    this.dragPreviewRef = null;\n    this.dragPreviewOptionsInternal = null;\n    this.lastConnectedHandlerId = null;\n    this.lastConnectedDragSource = null;\n    this.lastConnectedDragSourceOptions = null;\n    this.lastConnectedDragPreview = null;\n    this.lastConnectedDragPreviewOptions = null;\n    this.backend = backend;\n  }\n\n}","map":{"version":3,"sources":["/home/ubkrishn/Desktop/Website Development/reactjs/react_by_krishn/react-dragNdrop-chakra_ui/node_modules/react-dnd/src/internals/SourceConnector.ts"],"names":["wrapConnectorHooks","isRef","shallowEqual","SourceConnector","hooks","dragSource","node","options","clearDragSource","dragSourceOptions","dragSourceRef","dragSourceNode","reconnectDragSource","dragPreview","clearDragPreview","dragPreviewOptions","dragPreviewRef","dragPreviewNode","reconnectDragPreview","handlerId","dragSourceOptionsInternal","dragPreviewOptionsInternal","lastConnectedHandlerId","lastConnectedDragSource","lastConnectedDragSourceOptions","lastConnectedDragPreview","lastConnectedDragPreviewOptions","backend","receiveHandlerId","newHandlerId","reconnect","connectTarget","didChange","didHandlerIdChange","didConnectedDragSourceChange","didDragSourceOptionsChange","disconnectDragSource","dragSourceUnsubscribe","connectDragSource","forceDidChange","didConnectedDragPreviewChange","didDragPreviewOptionsChange","disconnectDragPreview","dragPreviewUnsubscribe","connectDragPreview","undefined","current"],"mappings":"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","sourcesContent":["import type { ReactElement, Ref, RefObject } from 'react'\nimport { wrapConnectorHooks } from './wrapConnectorHooks.js'\nimport type { Backend, Unsubscribe, Identifier } from 'dnd-core'\nimport { isRef } from './isRef.js'\nimport type { DragSourceOptions, DragPreviewOptions } from '../types/index.js'\nimport { shallowEqual } from '@react-dnd/shallowequal'\n\nexport interface Connector {\n\thooks: any\n\tconnectTarget: any\n\treceiveHandlerId(handlerId: Identifier | null): void\n\treconnect(): void\n}\n\nexport class SourceConnector implements Connector {\n\tpublic hooks = wrapConnectorHooks({\n\t\tdragSource: (\n\t\t\tnode: Element | ReactElement | Ref<any>,\n\t\t\toptions?: DragSourceOptions,\n\t\t) => {\n\t\t\tthis.clearDragSource()\n\t\t\tthis.dragSourceOptions = options || null\n\t\t\tif (isRef(node)) {\n\t\t\t\tthis.dragSourceRef = node as RefObject<any>\n\t\t\t} else {\n\t\t\t\tthis.dragSourceNode = node\n\t\t\t}\n\t\t\tthis.reconnectDragSource()\n\t\t},\n\t\tdragPreview: (node: any, options?: DragPreviewOptions) => {\n\t\t\tthis.clearDragPreview()\n\t\t\tthis.dragPreviewOptions = options || null\n\t\t\tif (isRef(node)) {\n\t\t\t\tthis.dragPreviewRef = node\n\t\t\t} else {\n\t\t\t\tthis.dragPreviewNode = node\n\t\t\t}\n\t\t\tthis.reconnectDragPreview()\n\t\t},\n\t})\n\tprivate handlerId: Identifier | null = null\n\n\t// The drop target may either be attached via ref or connect function\n\tprivate dragSourceRef: RefObject<any> | null = null\n\tprivate dragSourceNode: any\n\tprivate dragSourceOptionsInternal: DragSourceOptions | null = null\n\tprivate dragSourceUnsubscribe: Unsubscribe | undefined\n\n\t// The drag preview may either be attached via ref or connect function\n\tprivate dragPreviewRef: RefObject<any> | null = null\n\tprivate dragPreviewNode: any\n\tprivate dragPreviewOptionsInternal: DragPreviewOptions | null = null\n\tprivate dragPreviewUnsubscribe: Unsubscribe | undefined\n\n\tprivate lastConnectedHandlerId: Identifier | null = null\n\tprivate lastConnectedDragSource: any = null\n\tprivate lastConnectedDragSourceOptions: any = null\n\tprivate lastConnectedDragPreview: any = null\n\tprivate lastConnectedDragPreviewOptions: any = null\n\n\tprivate readonly backend: Backend\n\n\tpublic constructor(backend: Backend) {\n\t\tthis.backend = backend\n\t}\n\n\tpublic receiveHandlerId(newHandlerId: Identifier | null): void {\n\t\tif (this.handlerId === newHandlerId) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.handlerId = newHandlerId\n\t\tthis.reconnect()\n\t}\n\n\tpublic get connectTarget(): any {\n\t\treturn this.dragSource\n\t}\n\n\tpublic get dragSourceOptions(): DragSourceOptions | null {\n\t\treturn this.dragSourceOptionsInternal\n\t}\n\tpublic set dragSourceOptions(options: DragSourceOptions | null) {\n\t\tthis.dragSourceOptionsInternal = options\n\t}\n\n\tpublic get dragPreviewOptions(): DragPreviewOptions | null {\n\t\treturn this.dragPreviewOptionsInternal\n\t}\n\n\tpublic set dragPreviewOptions(options: DragPreviewOptions | null) {\n\t\tthis.dragPreviewOptionsInternal = options\n\t}\n\n\tpublic reconnect(): void {\n\t\tconst didChange = this.reconnectDragSource()\n\t\tthis.reconnectDragPreview(didChange)\n\t}\n\n\tprivate reconnectDragSource(): boolean {\n\t\tconst dragSource = this.dragSource\n\t\t// if nothing has changed then don't resubscribe\n\t\tconst didChange =\n\t\t\tthis.didHandlerIdChange() ||\n\t\t\tthis.didConnectedDragSourceChange() ||\n\t\t\tthis.didDragSourceOptionsChange()\n\n\t\tif (didChange) {\n\t\t\tthis.disconnectDragSource()\n\t\t}\n\n\t\tif (!this.handlerId) {\n\t\t\treturn didChange\n\t\t}\n\t\tif (!dragSource) {\n\t\t\tthis.lastConnectedDragSource = dragSource\n\t\t\treturn didChange\n\t\t}\n\n\t\tif (didChange) {\n\t\t\tthis.lastConnectedHandlerId = this.handlerId\n\t\t\tthis.lastConnectedDragSource = dragSource\n\t\t\tthis.lastConnectedDragSourceOptions = this.dragSourceOptions\n\t\t\tthis.dragSourceUnsubscribe = this.backend.connectDragSource(\n\t\t\t\tthis.handlerId,\n\t\t\t\tdragSource,\n\t\t\t\tthis.dragSourceOptions,\n\t\t\t)\n\t\t}\n\t\treturn didChange\n\t}\n\n\tprivate reconnectDragPreview(forceDidChange = false): void {\n\t\tconst dragPreview = this.dragPreview\n\t\t// if nothing has changed then don't resubscribe\n\t\tconst didChange =\n\t\t\tforceDidChange ||\n\t\t\tthis.didHandlerIdChange() ||\n\t\t\tthis.didConnectedDragPreviewChange() ||\n\t\t\tthis.didDragPreviewOptionsChange()\n\n\t\tif (didChange) {\n\t\t\tthis.disconnectDragPreview()\n\t\t}\n\n\t\tif (!this.handlerId) {\n\t\t\treturn\n\t\t}\n\t\tif (!dragPreview) {\n\t\t\tthis.lastConnectedDragPreview = dragPreview\n\t\t\treturn\n\t\t}\n\n\t\tif (didChange) {\n\t\t\tthis.lastConnectedHandlerId = this.handlerId\n\t\t\tthis.lastConnectedDragPreview = dragPreview\n\t\t\tthis.lastConnectedDragPreviewOptions = this.dragPreviewOptions\n\t\t\tthis.dragPreviewUnsubscribe = this.backend.connectDragPreview(\n\t\t\t\tthis.handlerId,\n\t\t\t\tdragPreview,\n\t\t\t\tthis.dragPreviewOptions,\n\t\t\t)\n\t\t}\n\t}\n\n\tprivate didHandlerIdChange(): boolean {\n\t\treturn this.lastConnectedHandlerId !== this.handlerId\n\t}\n\n\tprivate didConnectedDragSourceChange(): boolean {\n\t\treturn this.lastConnectedDragSource !== this.dragSource\n\t}\n\n\tprivate didConnectedDragPreviewChange(): boolean {\n\t\treturn this.lastConnectedDragPreview !== this.dragPreview\n\t}\n\n\tprivate didDragSourceOptionsChange(): boolean {\n\t\treturn !shallowEqual(\n\t\t\tthis.lastConnectedDragSourceOptions,\n\t\t\tthis.dragSourceOptions,\n\t\t)\n\t}\n\n\tprivate didDragPreviewOptionsChange(): boolean {\n\t\treturn !shallowEqual(\n\t\t\tthis.lastConnectedDragPreviewOptions,\n\t\t\tthis.dragPreviewOptions,\n\t\t)\n\t}\n\n\tpublic disconnectDragSource() {\n\t\tif (this.dragSourceUnsubscribe) {\n\t\t\tthis.dragSourceUnsubscribe()\n\t\t\tthis.dragSourceUnsubscribe = undefined\n\t\t}\n\t}\n\n\tpublic disconnectDragPreview() {\n\t\tif (this.dragPreviewUnsubscribe) {\n\t\t\tthis.dragPreviewUnsubscribe()\n\t\t\tthis.dragPreviewUnsubscribe = undefined\n\t\t\tthis.dragPreviewNode = null\n\t\t\tthis.dragPreviewRef = null\n\t\t}\n\t}\n\n\tprivate get dragSource() {\n\t\treturn (\n\t\t\tthis.dragSourceNode || (this.dragSourceRef && this.dragSourceRef.current)\n\t\t)\n\t}\n\n\tprivate get dragPreview() {\n\t\treturn (\n\t\t\tthis.dragPreviewNode ||\n\t\t\t(this.dragPreviewRef && this.dragPreviewRef.current)\n\t\t)\n\t}\n\n\tprivate clearDragSource() {\n\t\tthis.dragSourceNode = null\n\t\tthis.dragSourceRef = null\n\t}\n\n\tprivate clearDragPreview() {\n\t\tthis.dragPreviewNode = null\n\t\tthis.dragPreviewRef = null\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}